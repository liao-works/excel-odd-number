name: Build and Release Excel Tool

on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的tag时触发，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

# 设置必要的权限
permissions:
  contents: write  # 允许创建Release和上传资产
  packages: write  # 允许上传包

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      # 设置PowerShell的默认编码行为
      PSDefaultParameterValues: "*:Encoding=utf8"

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 升级pip
      run: python -m pip install --upgrade pip
      
    - name: 安装依赖
      run: |
        pip install -r requirements.txt
        
    - name: 验证环境
      run: |
        python --version
        pip list
        
    - name: 创建必要目录
      run: |
        if (!(Test-Path "templates")) { New-Item -ItemType Directory -Path "templates" }
        if (!(Test-Path "assets")) { New-Item -ItemType Directory -Path "assets" }
        
    - name: 设置控制台编码
      run: |
        # 设置PowerShell和控制台编码为UTF-8 (兼容PowerShell 7)
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8
        $PSDefaultParameterValues['*:Encoding'] = 'utf8'
        $env:PYTHONIOENCODING = "utf-8"
        # 设置当前会话的文件编码
        $OutputEncoding = [System.Text.Encoding]::UTF8
        # 确保PowerShell模块使用UTF-8
        $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
        $PSDefaultParameterValues['Set-Content:Encoding'] = 'utf8'
        Write-Host "Console and PowerShell encoding set to UTF-8"
        
    - name: 执行打包
      run: python build_github.py
      
    - name: 验证打包结果
      run: |
        # 使用Get-ChildItem查找EXE文件，避免中文路径编码问题
        $exeFiles = Get-ChildItem -Path "dist" -Filter "*.exe"
        if ($exeFiles.Count -gt 0) {
          $exeFile = $exeFiles[0]
          Write-Host "✅ EXE文件生成成功: $($exeFile.Name)"
          $size = $exeFile.Length / 1MB
          Write-Host "文件大小: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ EXE文件生成失败"
          Get-ChildItem -Path "dist" -Force | Format-Table Name, Length -AutoSize
          exit 1
        }
        
    - name: 准备发布文件
      run: |
        if (Test-Path "release") { Remove-Item "release" -Recurse -Force }
        New-Item -ItemType Directory -Path "release"

        # 智能复制EXE文件（保持原始文件名）
        $exeFiles = Get-ChildItem -Path "dist" -Filter "*.exe"
        if ($exeFiles.Count -gt 0) {
          $exeFile = $exeFiles[0]
          Copy-Item $exeFile.FullName "release/"
          Write-Host "✅ 复制EXE文件: $($exeFile.Name)"
        }

        # 智能复制说明文件（保持原始文件名）
        $txtFiles = Get-ChildItem -Path "dist" -Filter "*.txt"
        if ($txtFiles.Count -gt 0) {
          foreach ($txtFile in $txtFiles) {
            Copy-Item $txtFile.FullName "release/"
            Write-Host "✅ 复制说明文件: $($txtFile.Name)"
          }
        }
        
        if (Test-Path "templates") {
          Copy-Item "templates" "release/" -Recurse
        }
        if (Test-Path "assets") {
          Copy-Item "assets" "release/" -Recurse
        }
        
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.+)') { $matches[1] } else { "dev-build" }
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        
        $content = "# Excel Data Processor - Version Information`n`n"
        $content += "Version: $version`n"
        $content += "Build Time: $buildTime`n"
        $content += "Build Environment: GitHub Actions`n"
        $content += "Operating System: Windows Latest`n"
        $content += "Python Version: 3.11`n`n"
        $content += "## File Description`n"
        # 动态生成文件描述
        $exeFiles = Get-ChildItem -Path "release" -Filter "*.exe"
        if ($exeFiles.Count -gt 0) {
          $content += "- $($exeFiles[0].Name): Main application (Excel数据处理工具)`n"
        }
        $txtFiles = Get-ChildItem -Path "release" -Filter "*.txt" | Where-Object { $_.Name -ne "VersionInfo.txt" }
        if ($txtFiles.Count -gt 0) {
          foreach ($txtFile in $txtFiles) {
            $content += "- $($txtFile.Name): Usage instructions and documentation`n"
          }
        }
        $content += "- templates/: Template files directory (if available)`n"
        $content += "- assets/: Asset files directory (if available)`n`n"
        $content += "## Installation Instructions`n"
        $content += "1. Download and extract the complete package`n"
        if ($exeFiles.Count -gt 0) {
          $content += "2. Double-click '$($exeFiles[0].Name)' to start the application`n"
        } else {
          $content += "2. Double-click the main executable file to start`n"
        }
        $content += "3. First-time use requires template file configuration`n"
        $content += "4. See the included documentation files for detailed instructions`n"
        
        $content | Out-File -FilePath "release/VersionInfo.txt" -Encoding UTF8
        
    - name: 创建压缩包
      run: |
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.+)') { $matches[1] } else { "dev-build" }
        $zipName = "ExcelDataProcessor-$version-Windows.zip"
        Compress-Archive -Path "release/*" -DestinationPath $zipName
        Write-Host "Created ZIP: $zipName"
        
    - name: 获取版本标签
      id: get_version
      run: |
        if ($env:GITHUB_REF -match 'refs/tags/(.+)') {
          $version = $matches[1]
        } else {
          $version = "dev-build-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        $buildTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "build_time=$buildTime" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        echo "Build Time: $buildTime"
        
    - name: 创建Release并上传所有资产
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $buildTime = "${{ steps.get_version.outputs.build_time }}"

        # 创建Release说明
        $releaseBody = @"
## 📦 Excel Data Processor $version

### ✨ Main Features
- 🚚 UPS Data Processing: Read Excel files and fill data using UPS templates
- 📦 DPD Data Processing: Read Excel files and process data using DPD templates
- 🎯 One-click Processing: Select file → Choose type → Auto process → Save to desktop
- ⚙️ Template Settings: Support custom UPS and DPD Excel templates

### 🚀 Quick Start
1. **Download**: Download the ZIP package or individual files below
2. **Extract**: Extract to any directory (if using ZIP)
3. **Launch**: Double-click the main application file (.exe)
4. **Setup**: First-time use requires template configuration in Settings
5. **Use**: Follow the interface prompts to process Excel files

### 📋 System Requirements
- Windows 10 or higher
- 500MB available disk space
- Supported Excel formats: .xlsx, .xls

### 📖 Documentation
Complete user guide included in the package

### 🔧 Technical Information
- Build Time: $buildTime
- Python Version: 3.11
- Packaging Tool: PyInstaller
- Architecture: Windows x64
"@

        # 使用gh创建Release
        gh release create $version --title "Excel Data Processor $version" --notes $releaseBody

        # 上传ZIP包
        $zipFile = "ExcelDataProcessor-$version-Windows.zip"
        if (Test-Path $zipFile) {
          gh release upload $version $zipFile --clobber
          Write-Host "✅ 已上传ZIP包: $zipFile"
        }

        # 上传单独的EXE文件
        $exeFiles = Get-ChildItem -Path "dist" -Filter "*.exe"
        if ($exeFiles.Count -gt 0) {
          foreach ($exeFile in $exeFiles) {
            gh release upload $version $exeFile.FullName --clobber
            Write-Host "✅ 已上传EXE文件: $($exeFile.Name)"
          }
        }

        Write-Host "🎉 Release创建完成: $version"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 构建完成通知
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        Write-Host "🎉 构建和发布完成！"
        Write-Host "📦 Release版本: $version"
        Write-Host "🔗 查看发布: https://github.com/${{ github.repository }}/releases/tag/$version"